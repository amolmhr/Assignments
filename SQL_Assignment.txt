1. SELECT * FROM CITY WHERE POPULATION>100000 AND COUNTRYCODE = "USA";

2. SELECT NAME FROM CITY WHERE POPULATION>120000 AND COUNTRYCODE = "USA";

3. SELECT * FROM CITY ;

4. SELECT * FROM CITY WHERE ID= 1661;

5. SELECT * FROM CITY WHERE COUNTRYCODE = "JPN";

6. SELECT NAME FROM CITY WHERE COUNTRYCODE = "JPN";

7. SELECT CITY,STATE FROM STATION;

8. SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0;

9. (SELECT COUNT(CITY) FROM STATION) - (SELECT COUNT(DISTINCT CITY) FROM STATION);

10. SELECT CITY, LENGTH(CITY) FROM STATION WHERE LENGTH(CITY) = (SELECT MIN(LENGTH(CITY)) FROM STATION) ORDER BY CITY;

    SELECT CITY, LENGTH(CITY) FROM STATION WHERE LENGTH(CITY) = (SELECT MAX(LENGTH(CITY)) FROM STATION) ORDER BY CITY DESC;


11. SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE 'a%' OR CITY LIKE 'e%' OR CITY LIKE 'i%' OR CITY LIKE 'o%' OR CITY LIKE 'u%';


12. SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u';

13. SELECT DISTINCT CITY FROM STATION WHERE CITY NOT LIKE 'a%' AND CITY NOT LIKE 'e%' AND CITY NOT LIKE 'i%' AND CITY NOT LIKE 'o%' AND CITY NOT LIKE 'u%';

14. SELECT DISTINCT CITY FROM STATION WHERE CITY NOT LIKE '%a' AND CITY NOT LIKE '%e' AND CITY NOT LIKE '%i' AND CITY NOT LIKE '%o' AND CITY NOT LIKE '%u';

15. SELECT DISTINCT CITY FROM STATION WHERE (CITY NOT LIKE '%a' AND CITY NOT LIKE '%e' AND CITY NOT LIKE '%i' AND CITY NOT LIKE '%o' AND CITY NOT LIKE '%u')
OR (CITY NOT LIKE 'a%' AND CITY NOT LIKE 'e%' AND CITY NOT LIKE 'i%' AND CITY NOT LIKE 'o%' AND CITY NOT LIKE 'u%');

16. SELECT DISTINCT CITY FROM STATION WHERE (CITY NOT LIKE '%a' AND CITY NOT LIKE '%e' AND CITY NOT LIKE '%i' AND CITY NOT LIKE '%o' AND CITY NOT LIKE '%u')
AND (CITY NOT LIKE 'a%' AND CITY NOT LIKE 'e%' AND CITY NOT LIKE 'i%' AND CITY NOT LIKE 'o%' AND CITY NOT LIKE 'u%');

17. SELECT PRODUCT_ID,PRODUCT_NAME FROM PRODUCT INNER JOIN SALES ON PRODUCT.PRODUCT_ID = SALES.PRODUCT_ID 
WHERE SALES.SALE_DATE BETWEEN '2019-01-01' AND '2019-03-31';

18. SELECT DISTINCT AUTHOR_ID FROM FROM VIEWS WHERE AUTHOR_ID= VIEWER_ID ORDER BY AUTHOR_ID;

19. select round((select count(*) from delivery where order_date = customer_pref_delivery_date)/count(*)*100,2) as immediate_percentage from
delivery;



20. SELECT t.ad_id, (CASE 
        WHEN base != 0 THEN ROUND(t.num / t.base * 100, 2) 
        ELSE 0 
    END) AS Ctr 
FROM 
    (SELECT 
        ad_id,
        SUM(CASE WHEN action = 'clicked' OR action = 'viewed' THEN 1 ELSE 0 END) AS base,
        SUM(CASE WHEN action = 'clicked' THEN 1 ELSE 0 END) AS num
    FROM 
        ads
    GROUP BY 
        ad_id) t
ORDER BY 
    Ctr DESC, 
    t.ad_id ASC;



21.select employee_id, count(team_id) over (partition by team_id) as team_size from employee order by employee_id;

22.select c.country_name, case
when avg(weather_state) <= 15 then 'Cold'
when avg(weather_state) >= 25 then 'Hot'
else 'Warm'
end as weather_state
from
countries c
left join
weather w
on c.country_id = w.country_id
where month(day) = 11
group by c.country_name

23.select p.product_id, round(sum(u.units*p.price)/sum(u.units),2) as average_price
from
prices p 
left join
unitssold u
on p.product_id = u.product_id
where u.purchase_date >= start_date and u.purchase_date <= end_date
group by product_id
order by product_id


24. SELECT PLAYER_ID,MIN(EVENT_DATE) AS FIRST_LOGIN_DATE FROM ACTIVITY GROUP BY PLAYER_ID; 

25. SELECT PLAYER_ID, DEVICE_ID FROM ACTIVITY WHERE (PLAYER_ID, EVENT_DATE) IN (SELECT PLAYER_ID, MIN(EVENT_DATE) FROM ACTIVITY 
    GROUP BY PLAYER_ID);


26. SELECT P.PRODUCT_NAME, SUM(UNIT) AS TOTAL_UNITS
FROM (
    SELECT P.PRODUCT_ID, P.PRODUCT_NAME, O.UNIT
    FROM PRODUCTS AS P
    INNER JOIN ORDERS AS O ON P.PRODUCT_ID = O.PRODUCT_ID
    WHERE MONTH(O.ORDER_DATE) = 2 AND YEAR(O.ORDER_DATE) = 2020
) AS T
INNER JOIN PRODUCTS AS P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PRODUCT_ID, P.PRODUCT_NAME
HAVING SUM(UNIT) >= 100;


27. select user_id, name, mail from Users where
mail regexp '^[a-zA-Z]+[a-zA-Z0-9_\.\-]*@leetcode[\.]com'
order by user_id;

28.select t.customer_id, t.name from
(select c.customer_id, c.name, 
sum(case when month(o.order_date) = 6 and year(o.order_date) = 2020 then
p.price*o.quantity else 0 end) as june_spent,
sum(case when month(o.order_date) = 7 and year(o.order_date) = 2020 then
p.price*o.quantity else 0 end) as july_spent
from
Orders o
left join
Product p
on o.product_id = p.product_id
left join
Customers c
on o.customer_id = c.customer_id
group by c.customer_id) t
where june_spent >= 100 and july_spent >= 100;


29. select c.Title from
Content c
left join
TVProgram t
on c.content_id = t.content_id
where c.Kids_content = 'Y' and c.content_type = 'Movies' and
month(t.program_date) = 6 and year(t.program_date) = 2020;


30. select q.*, coalesce(n.Npv,0) as Npv
from
Queries q
left join
NPV n
on q.Id = n.Id and q.Year = n.Year;


31. select q.*, coalesce(n.Npv,0) as Npv
from
Queries q
left join
NPV n
on q.Id = n.Id and q.Year = n.Year;

32. select u.unique_id, e.name
from
employees e
left join
employeeUNI u
on e.id = u.id;


33. select u.name, coalesce(sum(r.distance),0) as travelled_distance
from
users u
left join
rides r
on u.id = r.user_id
group by u.name
order by travelled_distance desc, u.name; 


34. select p.product_name, sum(o.unit) as unit
from
Products p
left join
Orders o
on p.product_id = o.product_id
where month(o.order_date) = 2 and year(o.order_date) = 2020
group by p.product_id
having unit >= 100;


35. (select t1.name as Results from
(select u.name, count(u.user_id), dense_rank() over(order by count(user_id) 
desc, u.name) as r1 FROM
Users u
left join
MovieRating m
on u.user_id = m.user_id
group by u.user_id) t1
where r1 = 1)
union
(select t2.title as Results from
(select mo.title, avg(m.rating), dense_rank() over(order by avg(m.rating)desc, 
mo.title) as r2 from
Movies mo
left join
MovieRating m
on mo.movie_id = m.movie_id
where month(m.created_at) = 2 and year(m.created_at) = 2020
group by m.movie_id) t2
where r2 = 1);


36. select u.name, coalesce(sum(r.distance),0) as travelled_distance
from
users u
left join
rides r
on u.id = r.user_id
group by u.name
order by travelled_distance desc, u.name;


37. select u.unique_id, e.name
from
employees e
left join
employeeUNI u
on e.id = u.id;


38. select id, name from Students 
where department_id not in (select id from Departments);


39. select t.person1, t.person2, count(*) as call_count, sum(t.duration) as
total_duration
from
(select duration,
case when from_id < to_id then from_id else to_id end as person1,
case when from_id > to_id then from_id else to_id end as person2
from Calls) t
group by t.person1, t.person2;


40. select p.product_id, round(sum(u.units*p.price)/sum(u.units),2) as average_price
from
prices p 
left join
unitssold u
on p.product_id = u.product_id
where u.purchase_date >= start_date and u.purchase_date <= end_date
group by product_id
order by product_id;


41. select w.name as warehouse_name, sum(p.width*p.length*p.height*w.units) as
volume 
from
warehouse w
left join
products p
on w.product_id = p.product_id
group by w.name
order by w.name;

42. select t.sale_date, (t.apples_sold - t.oranges_sold) as diff
from
(select sale_date,
max(CASE WHEN fruit = 'apples' THEN sold_num ELSE 0 END )as apples_sold,
max(CASE WHEN fruit = 'oranges' THEN sold_num ELSE 0 END )as oranges_sold
FROM sales
group by sale_date) t
ORDER BY t.sale_date;


43.select round(t.player_id/(select count(distinct player_id) from activity),2) as
fraction
from
(
select distinct player_id,
datediff(event_date, lead(event_date, 1) over(partition by player_id order by
event_date)) as diff
from activity ) t
where diff = -1;



44. select t.name from
(select a.id, a.name, count(b.managerID) as no_of_direct_reports from
employee a
INNER JOIN
employee b
on a.id = b.managerID
group by b.managerID) t
where no_of_direct_reports >= 5
order by t.name;


45. select d.dept_name, count(s.dept_id) as student_number from
department d
left join
student s
on s.dept_id = d.dept_id
group by d.dept_id
order by student_number desc, dept_name;


46. select customer_id
from
customer
group by customer_id
having count(distinct product_key)=(select count(*) from product);


47. select t.project_id, t.employee_id
from
(select p.project_id, e.employee_id, dense_rank() over(partition by p.project_id 
order by e.experience_years desc) as r
from
project p
left join
employee e
on p.employee_id = e.employee_id) t
where r = 1
order by t.project_id;


48. select t1.book_id, t1.name
from
(
(select book_id, name from Books where
available_from < '2019-05-23') t1
left join
(select book_id, sum(quantity) as quantity
from Orders
where dispatch_date > '2018-06-23' and dispatch_date<= '2019-06-23'
group by book_id
having quantity < 10) t2
on t1.book_id = t2.book_id
);



49. select t.student_id, t.course_id, t.grade
from
(select student_id, course_id, grade, dense_rank() over(partition by student_id 
order by grade desc, course_id) as r
from enrollments) t
where r = 1
order by t.student_id;


50. select t2.group_id, t2.player_id from
(
select t1.group_id, t1.player_id, 
dense_rank() over(partition by group_id order by score desc, player_id) as r
from
(
select p.*, case when p.player_id = m.first_player then m.first_score
when p.player_id = m.second_player then m.second_score
end as score
from
Players p, Matches m
where player_id in (first_player, second_player)
) t1
) t2
where r = 1;